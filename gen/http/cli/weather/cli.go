// Code generated by goa v3.3.1, DO NOT EDIT.
//
// weather HTTP client CLI support package
//
// Command:
// $ goa gen github.com/penkovski/goademo/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	healthcheckc "github.com/penkovski/goademo/gen/http/healthcheck/client"
	weatherc "github.com/penkovski/goademo/gen/http/weather/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `healthcheck (liveness|readiness)
weather weather-query
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` healthcheck liveness` + "\n" +
		os.Args[0] + ` weather weather-query --body '{
      "lat": 51.50853,
      "lon": -0.12574,
      "units": "metric"
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		healthcheckFlags = flag.NewFlagSet("healthcheck", flag.ContinueOnError)

		healthcheckLivenessFlags = flag.NewFlagSet("liveness", flag.ExitOnError)

		healthcheckReadinessFlags = flag.NewFlagSet("readiness", flag.ExitOnError)

		weatherFlags = flag.NewFlagSet("weather", flag.ContinueOnError)

		weatherWeatherQueryFlags    = flag.NewFlagSet("weather-query", flag.ExitOnError)
		weatherWeatherQueryBodyFlag = weatherWeatherQueryFlags.String("body", "REQUIRED", "")
	)
	healthcheckFlags.Usage = healthcheckUsage
	healthcheckLivenessFlags.Usage = healthcheckLivenessUsage
	healthcheckReadinessFlags.Usage = healthcheckReadinessUsage

	weatherFlags.Usage = weatherUsage
	weatherWeatherQueryFlags.Usage = weatherWeatherQueryUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "healthcheck":
			svcf = healthcheckFlags
		case "weather":
			svcf = weatherFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "healthcheck":
			switch epn {
			case "liveness":
				epf = healthcheckLivenessFlags

			case "readiness":
				epf = healthcheckReadinessFlags

			}

		case "weather":
			switch epn {
			case "weather-query":
				epf = weatherWeatherQueryFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "healthcheck":
			c := healthcheckc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "liveness":
				endpoint = c.Liveness()
				data = nil
			case "readiness":
				endpoint = c.Readiness()
				data = nil
			}
		case "weather":
			c := weatherc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "weather-query":
				endpoint = c.WeatherQuery()
				data, err = weatherc.BuildWeatherQueryPayload(*weatherWeatherQueryBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// healthcheckUsage displays the usage of the healthcheck command and its
// subcommands.
func healthcheckUsage() {
	fmt.Fprintf(os.Stderr, `The healthcheck service is used report on the liveness and readiness status of the weather service.
Usage:
    %s [globalflags] healthcheck COMMAND [flags]

COMMAND:
    liveness: Liveness implements liveness.
    readiness: Readiness implements readiness.

Additional help:
    %s healthcheck COMMAND --help
`, os.Args[0], os.Args[0])
}
func healthcheckLivenessUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] healthcheck liveness

Liveness implements liveness.

Example:
    `+os.Args[0]+` healthcheck liveness
`, os.Args[0])
}

func healthcheckReadinessUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] healthcheck readiness

Readiness implements readiness.

Example:
    `+os.Args[0]+` healthcheck readiness
`, os.Args[0])
}

// weatherUsage displays the usage of the weather command and its subcommands.
func weatherUsage() {
	fmt.Fprintf(os.Stderr, `The weather service returns information for a given location.
Usage:
    %s [globalflags] weather COMMAND [flags]

COMMAND:
    weather-query: WeatherQuery implements WeatherQuery.

Additional help:
    %s weather COMMAND --help
`, os.Args[0], os.Args[0])
}
func weatherWeatherQueryUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] weather weather-query -body JSON

WeatherQuery implements WeatherQuery.
    -body JSON: 

Example:
    `+os.Args[0]+` weather weather-query --body '{
      "lat": 51.50853,
      "lon": -0.12574,
      "units": "metric"
   }'
`, os.Args[0])
}
