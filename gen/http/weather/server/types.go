// Code generated by goa v3.3.1, DO NOT EDIT.
//
// weather HTTP server types
//
// Command:
// $ goa gen github.com/penkovski/goademo/design

package server

import (
	weather "github.com/penkovski/goademo/gen/weather"
	goa "goa.design/goa/v3/pkg"
)

// WeatherQueryRequestBody is the type of the "weather" service "WeatherQuery"
// endpoint HTTP request body.
type WeatherQueryRequestBody struct {
	// Latitude coordinate of location.
	Lat *float64 `form:"lat,omitempty" json:"lat,omitempty" xml:"lat,omitempty"`
	// Longitude coordinate of location.
	Lon *float64 `form:"lon,omitempty" json:"lon,omitempty" xml:"lon,omitempty"`
	// Units of measurement. Possible values are 'standard', 'metric' or 'imperial'.
	Units *string `form:"units,omitempty" json:"units,omitempty" xml:"units,omitempty"`
}

// WeatherQueryOKResponseBody is the type of the "weather" service
// "WeatherQuery" endpoint HTTP response body.
type WeatherQueryOKResponseBody struct {
	Temp      float64  `form:"temp" json:"temp" xml:"temp"`
	FeelsLike *float64 `form:"feels_like,omitempty" json:"feels_like,omitempty" xml:"feels_like,omitempty"`
	Pressure  *int     `form:"pressure,omitempty" json:"pressure,omitempty" xml:"pressure,omitempty"`
	WindSpeed *int     `form:"wind_speed,omitempty" json:"wind_speed,omitempty" xml:"wind_speed,omitempty"`
}

// NewWeatherQueryOKResponseBody builds the HTTP response body from the result
// of the "WeatherQuery" endpoint of the "weather" service.
func NewWeatherQueryOKResponseBody(res *weather.WeatherQueryResult) *WeatherQueryOKResponseBody {
	body := &WeatherQueryOKResponseBody{
		Temp:      res.Temp,
		FeelsLike: res.FeelsLike,
		Pressure:  res.Pressure,
		WindSpeed: res.WindSpeed,
	}
	return body
}

// NewWeatherQueryRequest builds a weather service WeatherQuery endpoint
// payload.
func NewWeatherQueryRequest(body *WeatherQueryRequestBody) *weather.WeatherQueryRequest {
	v := &weather.WeatherQueryRequest{
		Lat:   *body.Lat,
		Lon:   *body.Lon,
		Units: body.Units,
	}

	return v
}

// ValidateWeatherQueryRequestBody runs the validations defined on
// WeatherQueryRequestBody
func ValidateWeatherQueryRequestBody(body *WeatherQueryRequestBody) (err error) {
	if body.Lat == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lat", "body"))
	}
	if body.Lon == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lon", "body"))
	}
	return
}
