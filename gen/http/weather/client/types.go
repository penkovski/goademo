// Code generated by goa v3.4.3, DO NOT EDIT.
//
// weather HTTP client types
//
// Command:
// $ goa gen github.com/penkovski/goademo/design

package client

import (
	weather "github.com/penkovski/goademo/gen/weather"
	goa "goa.design/goa/v3/pkg"
)

// WeatherQueryRequestBody is the type of the "weather" service "WeatherQuery"
// endpoint HTTP request body.
type WeatherQueryRequestBody struct {
	// Latitude coordinate of location.
	Lat float64 `form:"lat" json:"lat" xml:"lat"`
	// Longitude coordinate of location.
	Lon float64 `form:"lon" json:"lon" xml:"lon"`
	// Units of measurement. Possible values are 'standard', 'metric' or 'imperial'.
	Units *string `form:"units,omitempty" json:"units,omitempty" xml:"units,omitempty"`
}

// WeatherQueryOKResponseBody is the type of the "weather" service
// "WeatherQuery" endpoint HTTP response body.
type WeatherQueryOKResponseBody struct {
	Temp      *float64 `form:"temp,omitempty" json:"temp,omitempty" xml:"temp,omitempty"`
	FeelsLike *float64 `form:"feels_like,omitempty" json:"feels_like,omitempty" xml:"feels_like,omitempty"`
	Pressure  *int     `form:"pressure,omitempty" json:"pressure,omitempty" xml:"pressure,omitempty"`
	WindSpeed *int     `form:"wind_speed,omitempty" json:"wind_speed,omitempty" xml:"wind_speed,omitempty"`
}

// WeatherQueryBadRequestResponseBody is used to define fields on response body
// types.
type WeatherQueryBadRequestResponseBody struct {
	Temp      *float64 `form:"temp,omitempty" json:"temp,omitempty" xml:"temp,omitempty"`
	FeelsLike *float64 `form:"feels_like,omitempty" json:"feels_like,omitempty" xml:"feels_like,omitempty"`
	Pressure  *int     `form:"pressure,omitempty" json:"pressure,omitempty" xml:"pressure,omitempty"`
	WindSpeed *int     `form:"wind_speed,omitempty" json:"wind_speed,omitempty" xml:"wind_speed,omitempty"`
}

// WeatherQueryInternalServerErrorResponseBody is used to define fields on
// response body types.
type WeatherQueryInternalServerErrorResponseBody struct {
	Temp      *float64 `form:"temp,omitempty" json:"temp,omitempty" xml:"temp,omitempty"`
	FeelsLike *float64 `form:"feels_like,omitempty" json:"feels_like,omitempty" xml:"feels_like,omitempty"`
	Pressure  *int     `form:"pressure,omitempty" json:"pressure,omitempty" xml:"pressure,omitempty"`
	WindSpeed *int     `form:"wind_speed,omitempty" json:"wind_speed,omitempty" xml:"wind_speed,omitempty"`
}

// NewWeatherQueryRequestBody builds the HTTP request body from the payload of
// the "WeatherQuery" endpoint of the "weather" service.
func NewWeatherQueryRequestBody(p *weather.WeatherQueryRequest) *WeatherQueryRequestBody {
	body := &WeatherQueryRequestBody{
		Lat:   p.Lat,
		Lon:   p.Lon,
		Units: p.Units,
	}
	return body
}

// NewWeatherQueryResultOK builds a "weather" service "WeatherQuery" endpoint
// result from a HTTP "OK" response.
func NewWeatherQueryResultOK(body *WeatherQueryOKResponseBody) *weather.WeatherQueryResult {
	v := &weather.WeatherQueryResult{
		Temp:      *body.Temp,
		FeelsLike: body.FeelsLike,
		Pressure:  body.Pressure,
		WindSpeed: body.WindSpeed,
	}

	return v
}

// ValidateWeatherQueryOKResponseBody runs the validations defined on
// WeatherQueryOKResponseBody
func ValidateWeatherQueryOKResponseBody(body *WeatherQueryOKResponseBody) (err error) {
	if body.Temp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temp", "body"))
	}
	return
}

// ValidateWeatherQueryBadRequestResponseBody runs the validations defined on
// WeatherQueryBad RequestResponseBody
func ValidateWeatherQueryBadRequestResponseBody(body *WeatherQueryBadRequestResponseBody) (err error) {
	if body.Temp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temp", "body"))
	}
	return
}

// ValidateWeatherQueryInternalServerErrorResponseBody runs the validations
// defined on WeatherQueryInternal Server ErrorResponseBody
func ValidateWeatherQueryInternalServerErrorResponseBody(body *WeatherQueryInternalServerErrorResponseBody) (err error) {
	if body.Temp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temp", "body"))
	}
	return
}
