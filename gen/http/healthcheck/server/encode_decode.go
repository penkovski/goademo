// Code generated by goa v3.4.3, DO NOT EDIT.
//
// healthcheck HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/penkovski/goademo/design

package server

import (
	"context"
	"net/http"

	healthcheck "github.com/penkovski/goademo/gen/healthcheck"
	goahttp "goa.design/goa/v3/http"
)

// EncodeLivenessResponse returns an encoder for responses returned by the
// healthcheck liveness endpoint.
func EncodeLivenessResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*healthcheck.LivenessResult)
		enc := encoder(ctx, w)
		body := NewLivenessResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeReadinessResponse returns an encoder for responses returned by the
// healthcheck readiness endpoint.
func EncodeReadinessResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*healthcheck.ReadinessResult)
		enc := encoder(ctx, w)
		body := NewReadinessResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeReadinessError returns an encoder for errors returned by the readiness
// healthcheck endpoint.
func EncodeReadinessError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "ServiceUnavailableError":
			res := v.(*healthcheck.ServiceUnavailableError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewReadinessServiceUnavailableErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusServiceUnavailable)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}
